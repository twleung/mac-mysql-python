0.9.2c1

  * Use name of the python interpreter as part of the package name.
    On Red Hat Linux (7.2 and earlier), the standard python package
    is 1.5.2. The www.python.org RPM package for Python-2.2.1 is
    python2, and their 2.1.3 package is python2.1. This is so you can
    install all three at once; RPM considers them different packages.
    With this packaging change, you'll now get:

    python setup.py bdist_rpm # MySQL-python for python-1.5.2
    python2.1 setup.py bdist_rpm # MySQL-python2.1 for python 2.1.x
    python2 setup.py bdist_rpm # MySQL-python2 for python 2.2.x

    Once Python 2.3 comes out, that will probably become the python2
    package, and the Python 2.2.x version will become the python2.2
    package, or at least that's what the progression seems to be.

    Note that in the current Red Hat beta (skipjack), the python
    package is still 1.5.2 and python2 is 2.2. Skipjack already
    comes with MySQL-python-0.9.1, but I don't know what version of
    Python it's compiled against. Who knows if Red Hat will follow
    python.org's naming convention, but in any case, this change
    shouldn't hurt anything.

  * Plug: I will be at OScon2002 giving a tutorial session on the
    Python DB-API, mostly using MySQLdb.

        http://conferences.oreillynet.com/os2002/

0.9.2b2

  * Avoid memory leak when using dictionary-based cursors

  * Avoid crash when using fetchall on SSCursors (mysql_use_result)

0.9.2b1

  * Minor build updates

  * Avoid memory leak on connection failure

  * Avoid potential leak on cursor close. 

0.9.2a2

  * Reworked platform configuration some more. cygwin is now (sorta)
    supported (to the extent that Windows is supported at all).

  * Use PyObject_Del() to dealloc objects, if we have Python 2.0 or newer.

  * Fixed broken CursorStoreResultMixIn.fetchmany().

0.9.2a1

  * Added a number of DB-API extensions.

  * Unicode instances can now be used as parameters to cursor.execute().
    It attempts to use whatever character set MySQL is using. If that
    can't be determined, then latin1 is used.

  * Mac OS X configuration linkage fix (Dan Grassi)

  * netbsd configuration (Tage Stabell-Kuloe)

0.9.1

  * The Set class wasn't being imported into MySQLdb, so
    "from MySQLdb import *" didn't work (not that I recommend you do
    this).

  * Tested a bit with MySQL-4.0.0. Seems to be okay. Embedded support
    is forthcoming.

0.9.1c2 

  * Exceptions on connect() were not handled correctly.

  * Added CHANGELOG to MANIFEST.in. (John Bowe)

0.9.1c1

  * Added ER_PARSE_ERROR as a ProgrammingError, because
    ER_SYNTAX_ERROR doesn't get the job done.

  * In Python < 2.0.1, PyArgs_ParseTupleAndKeywords() returns a new
    reference when the O format is used. In 2.0.1 and later, it
    returns a borrowed reference. Since it's not actually documented
    either way that I can tell, I must assume this is some sort of
    bugfix. However, it does mean that you need to test against the
    Python version, and Py_INCREF() if it is 2.0.1 or later. If you
    Py_INCREF() all the time, you get a memory leak in earlier
    version; and if you never Py_INCREF(), it works fine in earlier
    versions but crashes later versions. If you're an end-user, don't
    worry about this...

  * In Python 2.2, the internal _PyTuple_Resize() dropped the (unused)
    third argument, so we have to test against the Python version here
    as well to maintain backwards compatibility.

  * Some deprecated MySQL API functions were removed.

  * A literal() method was added to the database connection. It takes
    a single argument and converts it into an SQL literal. If the
    argument is a non-string sequence, the sequence items are
    converted to SQL literals, and the sequence of converted items is
    returned as a list. This was previously done internally by Cursor
    objects. You don't normally need to use it, but it might be useful
    for debugging.

  * Return DECIMAL/NUMERIC columns as floats.

  * A number of documentation updates.


0.9.0

  Too many changes from 0.3.5 to go into much detail.

  * MySQLdb was turned into a true Python package.

  * _mysql didn't change all that much. Constants were moved out into
    the MySQLdb package structure. Exceptions were moved to
    _mysql_exceptions.py, but these are imported into _mysql. This
    makes the binary (and source) significantly smaller.

  * Reduced threadsafety to 1 (from 2), and ripped out a lot of the
    crap that attempts to let you safely share a connection between
    threads. If you are using transactions, you can only hand off the
    connection from one thread to another after a commit or
    rollback. Sharing a connection will hurt your performance anyway,
    so give each thread it's own connection.

  * A Set class was added for use with SET columns.

  * Loads of docstrings were added to take advantage of pydoc.

  * Operationally, there's not much difference.

